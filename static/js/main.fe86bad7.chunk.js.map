{"version":3,"sources":["components/Highlight.js","components/Button.js","components/SaveList.js","components/MainBox.js","App.js","reportWebVitals.js","index.js"],"names":["textNodesUnder","node","all","firstChild","nextSibling","nodeType","push","concat","Mark","id","children","removeRange","colorClass","className","onClick","event","stopPropagation","Highlightable","ranges","text","handleHighlight","deleteMark","range","newText","sort","a","b","offset","length","out","slice","i","nextRange","lastRange","processText","myRef","React","createRef","ref","onMouseUp","target","current","window","getSelection","getRangeAt","commonParent","commonAncestorContainer","startContainer","Node","TEXT_NODE","startOffset","endOffset","console","log","thisIdx","Array","prototype","indexOf","call","childNodes","allTextNodes","lenPrev","flat","reduce","t","x","startIndex","endIndex","annotatedString","substring","tokenizedText","require","tokenizer","tokenize","annotatedStringBIOCombinations","Math","random","toString","annotatedText","Button","SaveList","list","useState","downloadLink","setDownloadLink","useEffect","data","Blob","join","type","URL","revokeObjectURL","createObjectURL","makeTextFile","download","href","MainBox","addToPerson","setAddToPerson","addToLoc","setAddToLoc","setAddToOrg","setColorClass","nowAnnotating","setNowAnnotating","test_text","setText","personRanges","setPersonRanges","locRanges","setLocRanges","orgRanges","setOrgRanges","setRanges","showFile","e","preventDefault","reader","FileReader","onload","result","readAsText","files","rangesToExport","tag","j","startEnd","str","sub","getStartEnd","k","accept","onChange","Highlight","filter","r","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe86bad7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction textNodesUnder(node) {\n  var all = [];\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    if (node.nodeType == 3) all.push(node);\n    else all = all.concat(textNodesUnder(node));\n  }\n  return all;\n}\n\nconst Mark = ({ id, children, removeRange, colorClass }) => {\n  const handleClick = event => {\n    event.stopPropagation();\n    removeRange(id);\n  };\n  return (\n    <mark className={colorClass} onClick={handleClick}>\n      {children}\n    </mark>\n  );\n};\n\nconst Highlightable = ({ ranges, text, handleHighlight, deleteMark, colorClass}) => {\n  const onMouseUp = event => {\n    if (event.target !== myRef.current) return;\n    event.stopPropagation();\n\n    const range = window.getSelection().getRangeAt(0);\n\n    const commonParent = range.commonAncestorContainer;\n\n    if (range.startContainer !== commonParent) {\n      console.log(\"There is another element in here\");\n      return;\n    }\n\n    if (range.startContainer.nodeType !== Node.TEXT_NODE) {\n      console.log(\"Not a TEXT NODE\");\n      return;\n    }\n\n    if (range.startOffset === range.endOffset) {\n      console.log(\"Same offset\");\n      return;\n    }\n\n    console.log(range.startOffset, range.endOffset);\n\n    // Get Index of the Highlighted Container\n    const thisIdx = Array.prototype.indexOf.call(\n      myRef.current.childNodes,\n      range.startContainer\n    );\n\n    // Collect all Text Nodes from start until this node\n    const allTextNodes = [];\n    for (let i = 0; i < thisIdx; i++) {\n      const node = myRef.current.childNodes[i];\n\n      if (node.nodeType == Node.TEXT_NODE) {\n        allTextNodes.push(node);\n      } else {\n        allTextNodes.push(textNodesUnder(node));\n      }\n    }\n\n    // Get total length of all those Text Nodes combined\n    const lenPrev = allTextNodes.flat().reduce((t, x) => t + x.length, 0);\n    const startIndex = lenPrev + range.startOffset;\n    const endIndex = lenPrev + range.endOffset;\n\n    const annotatedString = text.substring(startIndex, endIndex);\n\n    const tokenizer = require('wink-tokenizer');\n    const myTokenizer = tokenizer();\n    const tokenizedText = myTokenizer.tokenize(annotatedString);\n\n    const annotatedStringBIOCombinations = []\n    annotatedStringBIOCombinations.push(`Token: \"${tokenizedText[0][\"value\"]}\"\\nToken Tag: \"${tokenizedText[0][\"tag\"]}\"\\nBIO Tag: B\\n`);\n\n    for (let i = 1; i < tokenizedText.length; i++) {\n      annotatedStringBIOCombinations.push(`\\nToken: \"${tokenizedText[i][\"value\"]}\"\\nToken Tag: \"${tokenizedText[i][\"tag\"]}\"\\nBIO Tag: I\\n`);\n    }\n\n    handleHighlight({\n      id: Math.random()\n        .toString(16)\n        .slice(2),\n      offset: startIndex,\n      length: endIndex - startIndex - 1,\n      endIndex: endIndex,\n      colorClass: colorClass,\n      annotatedText: annotatedString,\n      annotatedStringBIOCombinations: annotatedStringBIOCombinations\n    });\n  };\n\n  const removeRange = range => {\n    deleteMark(range);\n  };\n\n  const processText = () => {\n    ranges.sort((a, b) => a.offset - b.offset);\n\n    if (ranges.length === 0) return text;\n\n    const out = [text.slice(0, ranges[0].offset)];\n\n    for (let i = 0; i < ranges.length - 1; i++) {\n      const range = ranges[i];\n      const nextRange = ranges[i + 1];\n      out.push(\n        <Mark key={range.id} id={range.id} removeRange={removeRange} colorClass={range.colorClass}>\n          {text.slice(range.offset, range.offset + range.length + 1)}\n        </Mark>\n      );\n      out.push(text.slice(range.offset + range.length + 1, nextRange.offset));\n    }\n\n    const lastRange = ranges[ranges.length - 1];\n    out.push(\n      <Mark key={lastRange.id} id={lastRange.id} removeRange={removeRange} colorClass={lastRange.colorClass}>\n        {text.slice(lastRange.offset, lastRange.offset + lastRange.length + 1)}\n      </Mark>\n    );\n    out.push(text.slice(lastRange.offset + lastRange.length + 1, text.length));\n\n    return out;\n  };\n\n  const newText = processText();\n\n  const myRef = React.createRef();\n\n  return (\n    <div ref={myRef} onMouseUp={onMouseUp}>\n      {newText}\n    </div>\n  );\n};\n\nexport default Highlightable;\n","const Button = ({ text, className, onClick, id }) => {\n    return (\n        <button className={ className } onClick={onClick} id={id}>\n            { text }\n        </button>\n    )\n}\n\nexport default Button\n","import React, { useEffect, useState } from 'react'\n\nexport const SaveList: React.FC = ({list}) => {\n  // set up local state for generating the download link\n  const [downloadLink, setDownloadLink] = useState('')\n\n  // function for generating file and set download link\n  const makeTextFile = () => {\n    // This creates the file. \n    // In my case, I have an array, and each item in \n    // the array should be on a new line, which is why\n    // I use .join('\\n') here.\n    const data = new Blob([list.join('\\n')], { type: 'text/plain' })\n\n    // this part avoids memory leaks\n    if (downloadLink !== '') window.URL.revokeObjectURL(downloadLink)\n\n    // update the download link state\n    setDownloadLink(window.URL.createObjectURL(data))\n  }\n\n  // Call the function if list changes\n  useEffect(() => {\n    makeTextFile()\n  }, [list])\n\n  return (\n    <a id=\"exportLink\"\n      // this attribute sets the filename\n      download='annotations.txt'\n      // link to the download URL\n      href={downloadLink}\n    >\n      Export\n    </a>\n  )\n}\n\nexport default SaveList","import React, { useState } from \"react\";\nimport Highlightable from \"./Highlight\";\nimport Button from \"./Button\";\nimport SaveList from \"./SaveList\";\n\n\nconst MainBox = () => {\n\n    const [addToPerson, setAddToPerson] = useState (true)\n    const [addToLoc, setAddToLoc] = useState (false)\n    const [addToOrg, setAddToOrg] = useState (false)\n\n    const [colorClass, setColorClass] = useState (\"personTag\")\n\n    const [nowAnnotating, setNowAnnotating] = useState (\"Person\")\n\n    // default text for demo\n    const [test_text, setText] = useState (` Presidio Bank (OTCBB: PDOB), sdasa Bay Area business bank, today reported unaudited results for the first quarter ended March 31, 2019 with Net Income of $3.1 million, down from $3.3 million in the fourth quarter of 2018 and up from $2.2 million (38%) in the first quarter of 2018. Presidio Bank (OTCBB: PDOB), a Bay Area business bank, today reported unaudited results for the first quarter ended March 31, 2019 with Net Income of $3.1 million, down from $3.3 million in the fourth quarter of 2018 and up from $2.2 million (38%) in the first quarter of 2018.`);\n\n    // dynamically update each category's range\n    const [personRanges, setPersonRanges] = useState([]);\n    const [locRanges, setLocRanges] = useState([]);\n    const [orgRanges, setOrgRanges] = useState([]);\n\n    // to dynamically update the highligted substring\n    const [ranges, setRanges] = useState([]);\n\n    // add highlight to ranges\n    const handleHightlight = range => {\n        setRanges([...ranges, range]);\n\n        if (addToPerson) {\n            setPersonRanges([...personRanges, range]);\n        }\n        else if (addToLoc) {\n            setLocRanges([...locRanges, range]);\n        }\n        else {\n            setOrgRanges([...orgRanges, range]);\n        }\n    };\n\n    // delete the highlight by filtering it out from the ranges\n    const deleteMark = range => {\n    setRanges(ranges.filter(r => r.id !== range));\n    };\n\n    // import and display the input txt file\n    const showFile = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => { \n            const test_text = (e.target.result)\n            setText(test_text);\n            setRanges([]);\n        };\n        reader.readAsText(e.target.files[0])\n    }\n\n    const rangesToExport = [] // to export without BIO\n\n    for (let i = 0; i < ranges.length; i++) { \n        const id = ranges[i].id;\n        const offset = ranges[i].offset;\n        const annotatedText = ranges[i].annotatedString;\n        const annotatedStringBIOCombinations = ranges[i].annotatedStringBIOCombinations;\n        const tag = ranges[i].colorClass;\n        const endIndex = ranges[i].endIndex;\n\n        const text = `Start Index: ${offset}\\nEnd Index: ${endIndex}\\nAnnotation: ${tag}\\n${annotatedStringBIOCombinations}\\n------------------------------------------------------\\n`;\n        rangesToExport.push(text);\n    }\n\n    const tokenizer = require( 'wink-tokenizer' );\n    const myTokenizer = tokenizer();\n    const tokenizedText = myTokenizer.tokenize(test_text);\n\n    // for each token go through ranges and check if start/end indexes match\n    for (let j = 0; j < tokenizedText.length; j++) {\n        const str = test_text;\n        const sub = tokenizedText[j][\"value\"];\n        const getStartEnd = (str, sub) => [str.indexOf(sub), str.indexOf(sub) + sub.length - 1];\n        const startEnd = getStartEnd(str, sub);\n\n        let text = \"\";\n\n        for (let k = 0; k < ranges.length; k++) {\n            const startIndex = ranges[k].offset;\n            const endIndex = ranges[k].endIndex;\n\n            if (startIndex != startEnd[0] && endIndex != startEnd[1]) {\n                text = `Start Index: ${startEnd[0]}\\nEnd Index: ${startEnd[1]}\\nToken: \"${tokenizedText[j][\"value\"]}\"\\nToken Tag: \"${tokenizedText[j][\"tag\"]}\"\\nBIO status: O\\n\\n------------------------------------------------------\\n`;\n            }\n        }\n\n        rangesToExport.push(text);\n        \n    }\n\n    return (\n        <div id='main' className=\"mainItem\">\n          \n            <p>Now annotating: <span className={colorClass}>{nowAnnotating}</span></p>\n            <div id='topbar'>\n\n                <input type=\"file\" accept=\".txt\" className=\"file-upload\" onChange={(e) => showFile(e)} />\n        \n                <div id='annCategories'>\n\n                    <Button text='Person' className=\"annCategoryBtn\" id=\"personBtn\" onClick = {() => {\n                        setAddToPerson(true)\n                        setAddToLoc(false)\n                        setAddToOrg(false)\n                        setColorClass(\"personTag\")\n                        setNowAnnotating(\"Person\")\n                    }}/>\n\n                    <Button text='Location' className=\"annCategoryBtn\" id=\"locBtn\" onClick = {() => {\n                        setAddToPerson(false)\n                        setAddToLoc(true)\n                        setAddToOrg(false)\n                        setColorClass(\"locTag\")\n                        setNowAnnotating(\"Location\")\n                    }}/>\n\n                    <Button text='Organization' className=\"annCategoryBtn\" id=\"orgBtn\" onClick = {() => {\n                        setAddToPerson(false)\n                        setAddToLoc(false)\n                        setAddToOrg(true)\n                        setColorClass(\"orgTag\")\n                        setNowAnnotating(\"Organization\")\n                    }}/>\n\n                    <SaveList list={rangesToExport} />\n\n                </div>\n\n                \n            </div>\n            <div id='mainBox' className=\"middleItem\">\n                <Highlightable\n                    ranges={ranges}\n                    handleHighlight={handleHightlight}\n                    deleteMark={deleteMark}\n                    text={test_text}\n                    colorClass={colorClass}\n                />\n            </div>\n        </div>\n        \n    )\n}\n\nexport default MainBox\n","import { useState } from 'react'\n\nimport MainBox from './components/MainBox';\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>Annie</h1>\n\n      <div id='middle' className='mainItem'>\n        <MainBox />\n      </div>\n        \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}